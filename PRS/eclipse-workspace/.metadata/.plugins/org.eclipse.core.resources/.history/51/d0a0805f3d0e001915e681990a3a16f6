package plugin.gitlab.views;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.commands.Command;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.NotEnabledException;
import org.eclipse.core.commands.NotHandledException;
import org.eclipse.core.commands.ParameterizedCommand;
import org.eclipse.core.commands.common.NotDefinedException;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.ui.handlers.IHandlerService;
import org.eclipse.ui.part.ViewPart;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import plugin.gitlab.api.GitLabApi;

public class UserGroups extends ViewPart {
	private Tree mainTree;
    private enum ItemType{
    	GROUP,
    	PROJECT
    }
    
    private class TreeSelectionListener implements SelectionListener
    {
    	@Override
		public void widgetSelected(SelectionEvent e) {
			
		}
		
		@Override
		public void widgetDefaultSelected(SelectionEvent e) {
			int id = (int)e.item.getData("id");
			String command_name = "";
			switch((ItemType) e.item.getData("type"))
			{
				case GROUP:
					command_name = "plugin.gitlab.commands.groupPickCommand";
					break;
				case PROJECT:
					command_name = "plugin.gitlab.commands.projectPickCommand";
					break;
			}
			Command command = ((ICommandService)getSite().getService(ICommandService.class)).getCommand(command_name);
			Map<String, Object> parameterizations = new HashMap<String, Object>();
			parameterizations.put("id", Integer.toString(id));
			ParameterizedCommand pcommand = ParameterizedCommand.generateCommand(command, parameterizations);
			ExecutionEvent executionEvent = ((IHandlerService) getSite().getService(IHandlerService.class)).createExecutionEvent(pcommand, null);
			try {
				command.executeWithChecks(executionEvent);
			} catch (ExecutionException | NotDefinedException | NotEnabledException | NotHandledException exception) {
				// TODO Auto-generated catch block
				exception.printStackTrace();
			}
		}
    }
    
    public UserGroups() {
        super();
    }

    
	public void createPartControl(Composite parent) {
		mainTree = new Tree(parent, SWT.VERTICAL);
		mainTree.addSelectionListener(new TreeSelectionListener());
		try {
			JSONArray jsonGroupsArray = new JSONArray(GitLabApi.GitLabGetRequest("https://gitlab.com/api/v4/groups"));
			for(Object group_o : jsonGroupsArray )
			{
				JSONObject groupJson = (JSONObject) group_o;
				TreeItem groupTreeItem = new TreeItem(mainTree, SWT.VERTICAL);
				groupTreeItem.setData("id", groupJson.getInt("id"));
				groupTreeItem.setData("type", ItemType.GROUP);
				groupTreeItem.setText(groupJson.getString("name") + " " + groupJson.getString("web_url"));
				
				JSONArray jsonProjectsArray = new JSONArray(GitLabApi.GitLabGetRequest("https://gitlab.com/api/v4/groups/" + groupJson.getInt("id") + "/projects"));
				for(Object project_o : jsonProjectsArray )
				{
					JSONObject projectJson = (JSONObject) project_o;
					TreeItem projectTreeItem = new TreeItem(groupTreeItem,SWT.VERTICAL);
					projectTreeItem.setData("id", projectJson.getInt("id"));
					projectTreeItem.setData("type", ItemType.PROJECT);
					projectTreeItem.setText(projectJson.getString("name") + " " + projectJson.getString("web_url"));
				}
			}
			//label.setText(label_text);
		} catch (JSONException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void setFocus() {
		// TODO Auto-generated method stub
		
	}
}
