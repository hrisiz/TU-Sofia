package plugin.gitlab.views;

import org.eclipse.core.commands.Command;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.HandlerEvent;
import org.eclipse.core.commands.IHandler2;
import org.eclipse.core.commands.IHandlerListener;
import org.eclipse.core.commands.common.HandleObject;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.part.ViewPart;

public class Information extends ViewPart implements IHandlerListener {


	private boolean baseEnabled = true;

	@Override
	public void addHandlerListener(final IHandlerListener handlerListener) {
		addListenerObject(handlerListener);
	}

	protected void fireHandlerChanged(final HandlerEvent handlerEvent) {
		if (handlerEvent == null) {
			throw new NullPointerException();
		}

		for (Object listener : getListeners()) {
			final IHandlerListener handlerListener = (IHandlerListener) listener;
			handlerListener.handlerChanged(handlerEvent);
		}
	}
	@Override
	public boolean isEnabled() {
		return baseEnabled;
	}

	protected void setBaseEnabled(boolean state) {
		if (baseEnabled == state) {
			return;
		}
		baseEnabled = state;
		fireHandlerChanged(new HandlerEvent(this, true, false));
	}

	@Override
	public void setEnabled(Object evaluationContext) {
	}

	@Override
	public boolean isHandled() {
		return true;
	}

	protected boolean hasListeners() {
		return isListenerAttached();
	}

	@Override
	public void removeHandlerListener(final IHandlerListener handlerListener) {
		removeListenerObject(handlerListener);
	}
	
	private Label label;
	public Information()
	{
		super();
	}
	
	@Override
	public void createPartControl(Composite parent) {
		label = new Label(parent,0);
		label.setText("Main");
		IHandlerListener handler = this;
	}

	@Override
	public void setFocus() {
		// TODO Auto-generated method stub

		Command command;
		IHandler2 event;
		IHandlerListener handlerListener = new IHandlerListener() {

			@Override
			public void handlerChanged(HandlerEvent handlerEvent) {
				// TODO Auto-generated method stub
				
			}
			
		};
		event.addHandlerListener(handlerListener );
	}
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		String id = event.getParameter("id");
		System.out.println(id);
		return null;
	}
}
